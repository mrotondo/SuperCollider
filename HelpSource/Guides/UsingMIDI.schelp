title:: Using MIDI
summary:: Notes on MIDI support in SuperCollider
related:: Guides/MIDI, Classes/MIDIFunc, Classes/MIDIdef
categories:: MIDI

keyword::MIDI
section::Introduction

SuperCollider's out of the box MIDI support is fairly thorough (although not as complete as you'll find in commercial sequencers). All MIDI devices accessible to your operating system (CoreMIDI on OSX, ALSA on Linux, PortMIDI on Windows) are accessible to SuperCollider.

note::
This document is written from an OSX perspective. The essential behavior of the MIDI interface classes should be the same on other platforms, despite my continual reference to CoreMIDI here.
::

SuperCollider does not impose much higher-level structure on MIDI functionality. The core classes are little more than hardware abstractions (see also the link::Reference/MIDI:: helpfile):

definitionList::
## link::Classes/MIDIClient::
|| represents SuperCollider's communications with CoreMIDI
## link::Classes/MIDIIn::
|| receives MIDI messages and executes functions in response to those messages
## link::Classes/MIDIOut::
|| sends MIDI messages out to a specific port and channel
## link::Classes/MIDIEndPoint::
|| a client-side representation of a CoreMIDI device, containing three variables (name, device and uid, which is a unique identifier assigned by the system)
::

In most cases, each physical MIDI connection (pair of in/out jacks on the MIDI interface) has one MIDIEndPoint object to represent it in the client.

section::Receiving MIDI input
subsection:: MIDIFunc and MIDIdef

For most uses, the preferred way to receive MIDI input is using the link::Classes/MIDIFunc:: and link::Classes/MIDIdef:: classes. The advantage of this approach is that any number of responders can be registered, using extremely flexible matching. (By contrast, using link::Classes/MIDIIn:: responder functions directly means that only one function can exist per incoming message type. That is not an ideal programming practice.)

link::Classes/MIDIFunc:: has a number of convenience methods allowing you to register for the different MIDI message types. It can  filter incoming MIDI messages to respond to a particular device, channel number, or specific message number, or ranges thereof.

See link::#playing_notes_on_your_midi_keyboard#Playing notes on your MIDI keyboard:: below for a simple example using the note-on and note-off MIDIFuncs.

subsection:: MIDIIn

MIDIIn has a number of class variables holding functions to be evaluated when a MIDI event comes in. Technical details on each function can be found in the link::Classes/MIDIIn:: help file.

list::
## noteOn
## noteOff
## control
## bend
## touch
## polyTouch
## program
## sysex
## sysrt
## smpte
::

To assign a response to a particular kind of MIDI message, assign a function to the class variable:

code::
MIDIIn.connect;
MIDIIn.noteOn = { |port, chan, note, vel| [port, chan, note, vel].postln };
MIDIIn.noteOn = nil;	// stop responding
::

MIDIIn provides the responding functions with all the information coming in from CoreMIDI:

definitionList::
## source (src)
|| corresponds to the uid of the link::Classes/MIDIEndPoint:: from which the message is coming.
## channel (chan)
|| integer 0-15 representing the channel bits of the MIDI status byte.
::

... with subsequent arguments representing the data bytes. The link::Classes/MIDIIn:: help file details all the supported messages along with the arguments of the responding function for the message.

Because these are class variables, you can have only one function assigned at one time. A common usage is to assign a function that looks up responses in a collection. For example, you could have a separate set of response functions for each channel.

code::
~noteOn = Array.fill(16, IdentityDictionary.new);
MIDIIn.noteOn = { |port, chan, num, vel| ~noteOn[chan].do(_.value(port, chan, num, vel)) };

	// this function will respond only on channel 0
~noteOn[0].put(\postNoteOn, { |port, chan, num, vel| [port, chan, note, vel].postln });
~noteOn[0].removeAt(\postNoteOn);	// stop responding
::

The advantage of this approach over using "if" or "case" statements in the response function is that you can add and remove responses without having to change the MIDIIn function. The MIDIIn function can serve as a "hook" into another structure that distributes the MIDI events to the real responders.

section::Playing notes on your MIDI keyboard

The technical problem is that every note on needs to save its synth object so that the note off message can end the right server-side node.

code::
s.boot;

(
var notes, on, off;

//MIDIIn.connect;

notes = Array.newClear(128);	// array has one slot per possible MIDI note

on = MIDIFunc.noteOn({ |veloc, num, chan, src|
	notes[num] = Synth(\default, [\freq, num.midicps,
		\amp, veloc * 0.00315]);
});

off = MIDIFunc.noteOff({ |veloc, num, chan, src|
	notes[num].release;
});

q = { on.free; off.free; };
)

// when done:
q.value;
::

The link::Classes/MIDIIn:: help file contains a more elaborate example.

SuperCollider does not have a built-in class to handle this automatically. However, emphasis::dewdrop_lib::, a third party library mentioned link::#third_party_libraries#below::, includes Voicer (to simplify note on-off bookkeeping) and VoicerMIDISocket (to trigger Voicer notes by MIDI). Users interested in this functionality may wish to examine that library.

section::Sending MIDI out

See the link::Classes/MIDIOut:: helpfile. Unlike MIDIIn, with MIDIOut you create an instance of the MIDIOut class with a port and uid. You can have multiple MIDIOut objects to send MIDI to different physical devices.

Many users have reported timing issues with MIDIOut. When the CPU is busy, especially during graphics updates, outgoing MIDI messages may be delayed. Use with caution in a performance situation.

section::MIDI synchronization

MIDI synchronization may be performed using MIDIIn's sysrt or smpte response functions. It's up to the user to implement the desired kind of synchronization.

For sysrt, external MIDI clocks output 24 pulses per quarter note. The responder should count the incoming pulses and multiply the rhythmic value into 24 to determine how many pulses to wait:

table::
## 0.25 || wait 6 pulses (16th note)
## 0.5 || wait 12 pulses (8th note)
## 2 || wait 48 pulses (half note)
::

dewdrop_lib (third party library) includes a class, MIDISyncClock, that receives MIDI clock messages and allows events to be scheduled to keep time with an external MIDI device. See the MIDISyncClock helpfile for details.

There are significant limitations, discussed in the helpfile. This is not really a fully supported class, but it's there for users who need rudimentary MIDI sync functionality.

section::Third party libraries

emphasis::dewdrop_lib:: is a third party library providing a number of useful performance features, available through the link::Classes/Quarks:: interface. The library provides a user-extensible framework of MIDI responder classes designed for multiport, multichannel applications.

Among its features:

- user-extensible: simple functions may be used, and frequently-needed responses can be written into classes that inherit from the framework (see BasicMIDISocket and BasicMIDIControl helpfiles)

- easy to use classes for playing MIDI notes and assigning MIDI controllers to synthesis parameters

- a user-configurable array of MIDI controller numbers, to simplify assignment of events to hardware controllers
