class:: SCDocParser
summary:: Parse SCDoc markup text
categories:: HelpSystem
related:: Classes/SCDoc, Classes/SCDocRenderer, Guides/WritingHelp, Reference/SCDocSyntax

description::
This class is part of the SCDoc help system, and handles the parsing of the help sourcefiles into an internal tree of elements.

The markup language used in the help sourcefile is explained in link::Reference/SCDocSyntax::.

The internal tree representation consists of an array of nodes, each node looks like this:
code::
(tag:'tagSymbol', text:"textString", children:[], display:\block)
::
If the tag has text, it is put in the code::text:: field. If it has children, then the code::children:: field contains an array of children nodes. The code::display:: element is either code::\block:: or code::\inline::

In normal cases you won't need to use this class directly, link::Classes/SCDoc:: uses this class to parse and render all help sourcefiles.

classmethods::

method::new
Create a parser instance.

method:: getMethodDoc
Find helpfile for class and parse it to get the documentation for a specific method.
argument:: classname
The name of the class.
argument:: methodname
The name of the method, must be prefixed with code::*:: for classmethods and code::-:: for instancemethods.
returns:: The parsed node tree for the specific method documentation.
discussion::
This is used internally by the code::copymethod\:::: tag.

instancemethods::
private:: init, leaveLevel, popTree, pushTree, setTopNode, enterLevel, endCurrent, addTag, handleWord, addText, endLine, dumpSubTree, makeCategoryTree, generateUndocumentedMethods, dumpClassTree, handleCopyMethod

method::parseFile
Parse a help sourcefile written in SCDoc markup language.
returns:: the parser object.
argument::filename
The full path to the file.
discussion:: The resulting tree is available in code::parser.root::

method::parse
Parse a string of SCDoc markup language.
returns:: the parser object.
argument::string
The string to parse.
discussion:: The resulting tree is available in code::parser.root::

method::parseMetaData
Parse metadata of document and collect methods.
discussion::
This method will leave a list of all method names in code::parser.methodList::, prefixed with xk where
list::
## x is "+" for extended methods, or else "_"
## k is "*" for classmethods, "-" for instancemethods and "." for generic methods (often interfaces documented in a non-class helpfile)
::
It will also leave a list of all explicitly added keywords in code::parser.keywordList::

method::root
Set/get the root array of the internal document tree.

method:: methodList
Get the list of documented methods after running link::-parseMetaData::

method:: keywordList
Get the list of keywords after running link::-parseMetaData::

method::dump
Dump the internal document tree to the post window in a human-readable form.

method::findNode
Find a node.
returns:: An object representing the node, if the node was not found the resulting object will have code::.tag:: set to nil.
argument::tag
The tag to search for.
argument::rootNode
The array to search, defaults to code::this.root::.
discussion::
Example:
code::
p = SCDocParser.new.parseFile("/path/to/myfile.schelp");
p.findNode("related").text.postln;
::

examples::

code::
p = SCDocParser.new;
p.parseFile("/path/to/an/example.schelp");
p.dump;
p.findNode("summary").text.postln;
p.parse("inline code::code example::.").dump;
::

